"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSavedMapsError = exports.getSavedMapsSuccess = exports.getSavedMaps = exports.loadCloudMapError = exports.loadCloudMapSuccess = exports.loadCloudMap = exports.setCloudProvider = exports.resetProviderStatus = exports.postSaveLoadSuccess = exports.exportFileError = exports.exportFileSuccess = exports.exportFileToCloud = exports.ActionTypes = void 0;

var _reduxActions = require("redux-actions");

var _actionTypes = require("../constants/action-types");

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/** @type {import('./provider-actions').ProviderActionTypes} */
var ActionTypes = {
  EXPORT_FILE_TO_CLOUD: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_TO_CLOUD"),
  EXPORT_FILE_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_SUCCESS"),
  EXPORT_FILE_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "EXPORT_FILE_ERROR"),
  RESET_PROVIDER_STATUS: "".concat(_actionTypes.ACTION_PREFIX, "RESET_PROVIDER_STATUS"),
  SET_CLOUD_PROVIDER: "".concat(_actionTypes.ACTION_PREFIX, "SET_CLOUD_PROVIDER"),
  POST_SAVE_LOAD_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "POST_SAVE_LOAD_SUCCESS"),
  LOAD_CLOUD_MAP: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP"),
  LOAD_CLOUD_MAP_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP_SUCCESS"),
  LOAD_CLOUD_MAP_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "LOAD_CLOUD_MAP_ERROR"),
  GET_SAVED_MAPS: "".concat(_actionTypes.ACTION_PREFIX, "GET_SAVED_MAPS"),
  GET_SAVED_MAPS_SUCCESS: "".concat(_actionTypes.ACTION_PREFIX, "GET_SAVED_MAPS_SUCCESS"),
  GET_SAVED_MAPS_ERROR: "".concat(_actionTypes.ACTION_PREFIX, "GET_SAVED_MAPS_ERROR")
};
/**
 * Call provider to upload file to cloud
 * @param mapData
 * @param provider
 * @param options
 * @param onSuccess
 * @param onError
 * @param closeModal
 * @type {typeof import('./provider-actions').exportFileToCloud}
 */

exports.ActionTypes = ActionTypes;
var exportFileToCloud = (0, _reduxActions.createAction)(ActionTypes.EXPORT_FILE_TO_CLOUD, function (payload) {
  return payload;
});
/**
 * @type {typeof import('./provider-actions').exportFileSuccess}
 */

exports.exportFileToCloud = exportFileToCloud;
var exportFileSuccess = (0, _reduxActions.createAction)(ActionTypes.EXPORT_FILE_SUCCESS, function (payload) {
  return payload;
});
/** @type {typeof import('./provider-actions').exportFileError} */

exports.exportFileSuccess = exportFileSuccess;
var exportFileError = (0, _reduxActions.createAction)(ActionTypes.EXPORT_FILE_ERROR, function (payload) {
  return payload;
});
/** @type {typeof import('./provider-actions').postSaveLoadSuccess} */

exports.exportFileError = exportFileError;
var postSaveLoadSuccess = (0, _reduxActions.createAction)(ActionTypes.POST_SAVE_LOAD_SUCCESS, function (message) {
  return message;
});
/** @type {typeof import('./provider-actions').resetProviderStatus} */

exports.postSaveLoadSuccess = postSaveLoadSuccess;
var resetProviderStatus = (0, _reduxActions.createAction)(ActionTypes.RESET_PROVIDER_STATUS);
/** @type {typeof import('./provider-actions').setCloudProvider} */

exports.resetProviderStatus = resetProviderStatus;
var setCloudProvider = (0, _reduxActions.createAction)(ActionTypes.SET_CLOUD_PROVIDER, function (provider) {
  return provider;
});
/** @type {typeof import('./provider-actions').loadCloudMap} */

exports.setCloudProvider = setCloudProvider;
var loadCloudMap = (0, _reduxActions.createAction)(ActionTypes.LOAD_CLOUD_MAP, function (payload) {
  return payload;
});
/** @type {typeof import('./provider-actions').loadCloudMapSuccess} */

exports.loadCloudMap = loadCloudMap;
var loadCloudMapSuccess = (0, _reduxActions.createAction)(ActionTypes.LOAD_CLOUD_MAP_SUCCESS, function (payload) {
  return payload;
});
/** @type {typeof import('./provider-actions').loadCloudMapError} */

exports.loadCloudMapSuccess = loadCloudMapSuccess;
var loadCloudMapError = (0, _reduxActions.createAction)(ActionTypes.LOAD_CLOUD_MAP_ERROR, function (payload) {
  return payload;
});
/** @type {typeof import('./provider-actions').getSavedMaps} */

exports.loadCloudMapError = loadCloudMapError;
var getSavedMaps = (0, _reduxActions.createAction)(ActionTypes.GET_SAVED_MAPS, function (provider) {
  return provider;
});
/** @type {typeof import('./provider-actions').getSavedMapsSuccess} */

exports.getSavedMaps = getSavedMaps;
var getSavedMapsSuccess = (0, _reduxActions.createAction)(ActionTypes.GET_SAVED_MAPS_SUCCESS, function (payload) {
  return payload;
});
/** @type {typeof import('./provider-actions').getSavedMapsError} */

exports.getSavedMapsSuccess = getSavedMapsSuccess;
var getSavedMapsError = (0, _reduxActions.createAction)(ActionTypes.GET_SAVED_MAPS_ERROR, function (payload) {
  return payload;
});
exports.getSavedMapsError = getSavedMapsError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,