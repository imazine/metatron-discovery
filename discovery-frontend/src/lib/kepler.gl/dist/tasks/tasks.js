"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNWRAP_TASK = exports.DELAY_TASK = exports.ACTION_TASK = exports.GET_SAVED_MAPS_TASK = exports.LOAD_CLOUD_MAP_TASK = exports.EXPORT_FILE_TO_CLOUD_TASK = exports.LOAD_MAP_STYLE_TASK = exports.PROCESS_FILE_DATA = exports.LOAD_FILE_TASK = void 0;

var _tasks = _interopRequireWildcard(require("react-palm/tasks"));

var _d3Request = require("d3-request");

var _fileHandler = require("../processors/file-handler");

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var LOAD_FILE_TASK = _tasks["default"].fromPromise(function (_ref) {
  var file = _ref.file,
      fileCache = _ref.fileCache,
      loaders = _ref.loaders,
      loadOptions = _ref.loadOptions;
  return (0, _fileHandler.readFileInBatches)({
    file: file,
    fileCache: fileCache,
    loaders: loaders,
    loadOptions: loadOptions
  });
}, 'LOAD_FILE_TASK');

exports.LOAD_FILE_TASK = LOAD_FILE_TASK;

var PROCESS_FILE_DATA = _tasks["default"].fromPromise(_fileHandler.processFileData, 'PROCESS_FILE_CONTENT');

exports.PROCESS_FILE_DATA = PROCESS_FILE_DATA;
var LOAD_MAP_STYLE_TASK = (0, _tasks.taskCreator)(function (_ref2, success, error) {
  var url = _ref2.url,
      id = _ref2.id;
  return (0, _d3Request.json)(url, function (err, result) {
    if (err) {
      error(err);
    } else {
      if (!result) {
        error(new Error('Map style response is empty'));
      }

      success({
        id: id,
        style: result
      });
    }
  });
}, 'LOAD_MAP_STYLE_TASK');
/**
 * task to upload file to cloud provider
 */

exports.LOAD_MAP_STYLE_TASK = LOAD_MAP_STYLE_TASK;

var EXPORT_FILE_TO_CLOUD_TASK = _tasks["default"].fromPromise(function (_ref3) {
  var provider = _ref3.provider,
      payload = _ref3.payload;
  return provider.uploadMap(payload);
}, 'EXPORT_FILE_TO_CLOUD_TASK');

exports.EXPORT_FILE_TO_CLOUD_TASK = EXPORT_FILE_TO_CLOUD_TASK;

var LOAD_CLOUD_MAP_TASK = _tasks["default"].fromPromise(function (_ref4) {
  var provider = _ref4.provider,
      payload = _ref4.payload;
  return provider.downloadMap(payload);
}, 'LOAD_CLOUD_MAP_TASK');

exports.LOAD_CLOUD_MAP_TASK = LOAD_CLOUD_MAP_TASK;

var GET_SAVED_MAPS_TASK = _tasks["default"].fromPromise(function (provider) {
  return provider.listMaps();
}, 'GET_SAVED_MAPS_TASK');
/**
 *  task to dispatch a function as a task
 */


exports.GET_SAVED_MAPS_TASK = GET_SAVED_MAPS_TASK;

var ACTION_TASK = _tasks["default"].fromCallback(function (_, cb) {
  return cb();
}, 'ACTION_TASK');

exports.ACTION_TASK = ACTION_TASK;

var DELAY_TASK = _tasks["default"].fromCallback(function (delay, cb) {
  return window.setTimeout(function () {
    return cb();
  }, delay);
}, 'DELAY_TASK');

exports.DELAY_TASK = DELAY_TASK;

var UNWRAP_TASK = _tasks["default"].fromPromise(function (promise) {
  return promise;
}, 'UNWRAP');

exports.UNWRAP_TASK = UNWRAP_TASK;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90YXNrcy90YXNrcy5qcyJdLCJuYW1lcyI6WyJMT0FEX0ZJTEVfVEFTSyIsIlRhc2siLCJmcm9tUHJvbWlzZSIsImZpbGUiLCJmaWxlQ2FjaGUiLCJsb2FkZXJzIiwibG9hZE9wdGlvbnMiLCJQUk9DRVNTX0ZJTEVfREFUQSIsInByb2Nlc3NGaWxlRGF0YSIsIkxPQURfTUFQX1NUWUxFX1RBU0siLCJzdWNjZXNzIiwiZXJyb3IiLCJ1cmwiLCJpZCIsImVyciIsInJlc3VsdCIsIkVycm9yIiwic3R5bGUiLCJFWFBPUlRfRklMRV9UT19DTE9VRF9UQVNLIiwicHJvdmlkZXIiLCJwYXlsb2FkIiwidXBsb2FkTWFwIiwiTE9BRF9DTE9VRF9NQVBfVEFTSyIsImRvd25sb2FkTWFwIiwiR0VUX1NBVkVEX01BUFNfVEFTSyIsImxpc3RNYXBzIiwiQUNUSU9OX1RBU0siLCJmcm9tQ2FsbGJhY2siLCJfIiwiY2IiLCJERUxBWV9UQVNLIiwiZGVsYXkiLCJ3aW5kb3ciLCJzZXRUaW1lb3V0IiwiVU5XUkFQX1RBU0siLCJwcm9taXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTU8sSUFBTUEsY0FBYyxHQUFHQyxrQkFBS0MsV0FBTCxDQUM1QjtBQUFBLE1BQUVDLElBQUYsUUFBRUEsSUFBRjtBQUFBLE1BQVFDLFNBQVIsUUFBUUEsU0FBUjtBQUFBLE1BQW1CQyxPQUFuQixRQUFtQkEsT0FBbkI7QUFBQSxNQUE0QkMsV0FBNUIsUUFBNEJBLFdBQTVCO0FBQUEsU0FDRSxvQ0FBa0I7QUFBQ0gsSUFBQUEsSUFBSSxFQUFKQSxJQUFEO0FBQU9DLElBQUFBLFNBQVMsRUFBVEEsU0FBUDtBQUFrQkMsSUFBQUEsT0FBTyxFQUFQQSxPQUFsQjtBQUEyQkMsSUFBQUEsV0FBVyxFQUFYQTtBQUEzQixHQUFsQixDQURGO0FBQUEsQ0FENEIsRUFHNUIsZ0JBSDRCLENBQXZCOzs7O0FBTUEsSUFBTUMsaUJBQWlCLEdBQUdOLGtCQUFLQyxXQUFMLENBQy9CTSw0QkFEK0IsRUFHL0Isc0JBSCtCLENBQTFCOzs7QUFNQSxJQUFNQyxtQkFBbUIsR0FBRyx3QkFDakMsaUJBQVlDLE9BQVosRUFBcUJDLEtBQXJCO0FBQUEsTUFBRUMsR0FBRixTQUFFQSxHQUFGO0FBQUEsTUFBT0MsRUFBUCxTQUFPQSxFQUFQO0FBQUEsU0FDRSxxQkFBWUQsR0FBWixFQUFpQixVQUFDRSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDaEMsUUFBSUQsR0FBSixFQUFTO0FBQ1BILE1BQUFBLEtBQUssQ0FBQ0csR0FBRCxDQUFMO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSSxDQUFDQyxNQUFMLEVBQWE7QUFDWEosUUFBQUEsS0FBSyxDQUFDLElBQUlLLEtBQUosQ0FBVSw2QkFBVixDQUFELENBQUw7QUFDRDs7QUFDRE4sTUFBQUEsT0FBTyxDQUFDO0FBQUNHLFFBQUFBLEVBQUUsRUFBRkEsRUFBRDtBQUFLSSxRQUFBQSxLQUFLLEVBQUVGO0FBQVosT0FBRCxDQUFQO0FBQ0Q7QUFDRixHQVRELENBREY7QUFBQSxDQURpQyxFQWFqQyxxQkFiaUMsQ0FBNUI7QUFnQlA7Ozs7OztBQUdPLElBQU1HLHlCQUF5QixHQUFHakIsa0JBQUtDLFdBQUwsQ0FDdkM7QUFBQSxNQUFFaUIsUUFBRixTQUFFQSxRQUFGO0FBQUEsTUFBWUMsT0FBWixTQUFZQSxPQUFaO0FBQUEsU0FBeUJELFFBQVEsQ0FBQ0UsU0FBVCxDQUFtQkQsT0FBbkIsQ0FBekI7QUFBQSxDQUR1QyxFQUd2QywyQkFIdUMsQ0FBbEM7Ozs7QUFNQSxJQUFNRSxtQkFBbUIsR0FBR3JCLGtCQUFLQyxXQUFMLENBQ2pDO0FBQUEsTUFBRWlCLFFBQUYsU0FBRUEsUUFBRjtBQUFBLE1BQVlDLE9BQVosU0FBWUEsT0FBWjtBQUFBLFNBQXlCRCxRQUFRLENBQUNJLFdBQVQsQ0FBcUJILE9BQXJCLENBQXpCO0FBQUEsQ0FEaUMsRUFHakMscUJBSGlDLENBQTVCOzs7O0FBTUEsSUFBTUksbUJBQW1CLEdBQUd2QixrQkFBS0MsV0FBTCxDQUNqQyxVQUFBaUIsUUFBUTtBQUFBLFNBQUlBLFFBQVEsQ0FBQ00sUUFBVCxFQUFKO0FBQUEsQ0FEeUIsRUFHakMscUJBSGlDLENBQTVCO0FBS1A7Ozs7Ozs7QUFHTyxJQUFNQyxXQUFXLEdBQUd6QixrQkFBSzBCLFlBQUwsQ0FDekIsVUFBQ0MsQ0FBRCxFQUFJQyxFQUFKO0FBQUEsU0FBV0EsRUFBRSxFQUFiO0FBQUEsQ0FEeUIsRUFHekIsYUFIeUIsQ0FBcEI7Ozs7QUFNQSxJQUFNQyxVQUFVLEdBQUc3QixrQkFBSzBCLFlBQUwsQ0FDeEIsVUFBQ0ksS0FBRCxFQUFRRixFQUFSO0FBQUEsU0FBZUcsTUFBTSxDQUFDQyxVQUFQLENBQWtCO0FBQUEsV0FBTUosRUFBRSxFQUFSO0FBQUEsR0FBbEIsRUFBOEJFLEtBQTlCLENBQWY7QUFBQSxDQUR3QixFQUd4QixZQUh3QixDQUFuQjs7OztBQU1BLElBQU1HLFdBQVcsR0FBR2pDLGtCQUFLQyxXQUFMLENBQ3pCLFVBQUFpQyxPQUFPO0FBQUEsU0FBSUEsT0FBSjtBQUFBLENBRGtCLEVBR3pCLFFBSHlCLENBQXBCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIwIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IFRhc2ssIHt0YXNrQ3JlYXRvcn0gZnJvbSAncmVhY3QtcGFsbS90YXNrcyc7XG5pbXBvcnQge2pzb24gYXMgcmVxdWVzdEpzb259IGZyb20gJ2QzLXJlcXVlc3QnO1xuaW1wb3J0IHtyZWFkRmlsZUluQmF0Y2hlcywgcHJvY2Vzc0ZpbGVEYXRhfSBmcm9tICcuLi9wcm9jZXNzb3JzL2ZpbGUtaGFuZGxlcic7XG5cbmV4cG9ydCBjb25zdCBMT0FEX0ZJTEVfVEFTSyA9IFRhc2suZnJvbVByb21pc2UoXG4gICh7ZmlsZSwgZmlsZUNhY2hlLCBsb2FkZXJzLCBsb2FkT3B0aW9uc30pID0+XG4gICAgcmVhZEZpbGVJbkJhdGNoZXMoe2ZpbGUsIGZpbGVDYWNoZSwgbG9hZGVycywgbG9hZE9wdGlvbnN9KSxcbiAgJ0xPQURfRklMRV9UQVNLJ1xuKTtcblxuZXhwb3J0IGNvbnN0IFBST0NFU1NfRklMRV9EQVRBID0gVGFzay5mcm9tUHJvbWlzZShcbiAgcHJvY2Vzc0ZpbGVEYXRhLFxuXG4gICdQUk9DRVNTX0ZJTEVfQ09OVEVOVCdcbik7XG5cbmV4cG9ydCBjb25zdCBMT0FEX01BUF9TVFlMRV9UQVNLID0gdGFza0NyZWF0b3IoXG4gICh7dXJsLCBpZH0sIHN1Y2Nlc3MsIGVycm9yKSA9PlxuICAgIHJlcXVlc3RKc29uKHVybCwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGVycm9yKGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIGVycm9yKG5ldyBFcnJvcignTWFwIHN0eWxlIHJlc3BvbnNlIGlzIGVtcHR5JykpO1xuICAgICAgICB9XG4gICAgICAgIHN1Y2Nlc3Moe2lkLCBzdHlsZTogcmVzdWx0fSk7XG4gICAgICB9XG4gICAgfSksXG5cbiAgJ0xPQURfTUFQX1NUWUxFX1RBU0snXG4pO1xuXG4vKipcbiAqIHRhc2sgdG8gdXBsb2FkIGZpbGUgdG8gY2xvdWQgcHJvdmlkZXJcbiAqL1xuZXhwb3J0IGNvbnN0IEVYUE9SVF9GSUxFX1RPX0NMT1VEX1RBU0sgPSBUYXNrLmZyb21Qcm9taXNlKFxuICAoe3Byb3ZpZGVyLCBwYXlsb2FkfSkgPT4gcHJvdmlkZXIudXBsb2FkTWFwKHBheWxvYWQpLFxuXG4gICdFWFBPUlRfRklMRV9UT19DTE9VRF9UQVNLJ1xuKTtcblxuZXhwb3J0IGNvbnN0IExPQURfQ0xPVURfTUFQX1RBU0sgPSBUYXNrLmZyb21Qcm9taXNlKFxuICAoe3Byb3ZpZGVyLCBwYXlsb2FkfSkgPT4gcHJvdmlkZXIuZG93bmxvYWRNYXAocGF5bG9hZCksXG5cbiAgJ0xPQURfQ0xPVURfTUFQX1RBU0snXG4pO1xuXG5leHBvcnQgY29uc3QgR0VUX1NBVkVEX01BUFNfVEFTSyA9IFRhc2suZnJvbVByb21pc2UoXG4gIHByb3ZpZGVyID0+IHByb3ZpZGVyLmxpc3RNYXBzKCksXG5cbiAgJ0dFVF9TQVZFRF9NQVBTX1RBU0snXG4pO1xuLyoqXG4gKiAgdGFzayB0byBkaXNwYXRjaCBhIGZ1bmN0aW9uIGFzIGEgdGFza1xuICovXG5leHBvcnQgY29uc3QgQUNUSU9OX1RBU0sgPSBUYXNrLmZyb21DYWxsYmFjayhcbiAgKF8sIGNiKSA9PiBjYigpLFxuXG4gICdBQ1RJT05fVEFTSydcbik7XG5cbmV4cG9ydCBjb25zdCBERUxBWV9UQVNLID0gVGFzay5mcm9tQ2FsbGJhY2soXG4gIChkZWxheSwgY2IpID0+IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IGNiKCksIGRlbGF5KSxcblxuICAnREVMQVlfVEFTSydcbik7XG5cbmV4cG9ydCBjb25zdCBVTldSQVBfVEFTSyA9IFRhc2suZnJvbVByb21pc2UoXG4gIHByb21pc2UgPT4gcHJvbWlzZSxcblxuICAnVU5XUkFQJ1xuKTtcbiJdfQ==