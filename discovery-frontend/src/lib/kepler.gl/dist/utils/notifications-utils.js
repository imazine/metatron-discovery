"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNotification = createNotification;
exports.exportImageError = exports.successNotification = exports.errorNotification = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _utils = require("./utils");

var _defaultSettings = require("../constants/default-settings");

var _userGuides = require("../constants/user-guides");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Creates a notofication
 * @param {object} opt
 * @param {string} opt.message - Message to display during the notification
 * @param {string} opt.type - The type of message. One of DEFAULT_NOTIFICATION_TYPES
 * @param {string} opt.topic - The topic the notification belongs to. One of DEFAULT_NOTIFICATION_TOPICS
 * @param {string} opt.id optional id for notification. If not provided it will be generated by the method
 * @param {object} opt.options - Extra parameters to store as part of hte notification
 * @returns {object}
 */
function createNotification(_ref) {
  var _ref$message = _ref.message,
      message = _ref$message === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_MESSAGE : _ref$message,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TYPES.info : _ref$type,
      _ref$topic = _ref.topic,
      topic = _ref$topic === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global : _ref$topic,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? (0, _utils.generateHashId)(_defaultSettings.DEFAULT_UUID_COUNT) : _ref$id,
      options = (0, _objectWithoutProperties2["default"])(_ref, ["message", "type", "topic", "id"]);
  return _objectSpread(_objectSpread({}, options), {}, {
    id: id,
    message: message,
    type: type,
    topic: topic
  });
}
/**
 * Creates an error notification
 * @param options
 * @returns {{topic, id, message, type: (null|number)}}
 */


var errorNotification = function errorNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.error
  });
};
/**
 * Creates a success notification
 * @param options
 * @returns {{topic, id, message, type: null}}
 */


exports.errorNotification = errorNotification;

var successNotification = function successNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.success
  });
};

exports.successNotification = successNotification;

var exportImageError = function exportImageError(options) {
  return errorNotification(_objectSpread(_objectSpread({}, options), {}, {
    topic: _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global,
    message: "Failed to export image, please take a screenshot of the javascript console, report the with [this link](".concat(_userGuides.BUG_REPORT_LINK, ") ")
  }));
};

exports.exportImageError = exportImageError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ub3RpZmljYXRpb25zLXV0aWxzLmpzIl0sIm5hbWVzIjpbImNyZWF0ZU5vdGlmaWNhdGlvbiIsIm1lc3NhZ2UiLCJERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFIiwidHlwZSIsIkRFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTIiwiaW5mbyIsInRvcGljIiwiREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTIiwiZ2xvYmFsIiwiaWQiLCJERUZBVUxUX1VVSURfQ09VTlQiLCJvcHRpb25zIiwiZXJyb3JOb3RpZmljYXRpb24iLCJlcnJvciIsInN1Y2Nlc3NOb3RpZmljYXRpb24iLCJzdWNjZXNzIiwiZXhwb3J0SW1hZ2VFcnJvciIsIkJVR19SRVBPUlRfTElOSyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBRUE7O0FBT0E7Ozs7OztBQUVBOzs7Ozs7Ozs7O0FBVU8sU0FBU0Esa0JBQVQsT0FNSjtBQUFBLDBCQUxEQyxPQUtDO0FBQUEsTUFMREEsT0FLQyw2QkFMU0MsNkNBS1Q7QUFBQSx1QkFKREMsSUFJQztBQUFBLE1BSkRBLElBSUMsMEJBSk1DLDRDQUEyQkMsSUFJakM7QUFBQSx3QkFIREMsS0FHQztBQUFBLE1BSERBLEtBR0MsMkJBSE9DLDZDQUE0QkMsTUFHbkM7QUFBQSxxQkFGREMsRUFFQztBQUFBLE1BRkRBLEVBRUMsd0JBRkksMkJBQWVDLG1DQUFmLENBRUo7QUFBQSxNQURFQyxPQUNGO0FBQ0QseUNBQ0tBLE9BREw7QUFFRUYsSUFBQUEsRUFBRSxFQUFGQSxFQUZGO0FBR0VSLElBQUFBLE9BQU8sRUFBUEEsT0FIRjtBQUlFRSxJQUFBQSxJQUFJLEVBQUpBLElBSkY7QUFLRUcsSUFBQUEsS0FBSyxFQUFMQTtBQUxGO0FBT0Q7QUFFRDs7Ozs7OztBQUtPLElBQU1NLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQUQsT0FBTztBQUFBLHlDQUNuQ1gsa0JBQWtCLENBQUNXLE9BQUQsQ0FEaUI7QUFFdENSLElBQUFBLElBQUksRUFBRUMsNENBQTJCUztBQUZLO0FBQUEsQ0FBakM7QUFLUDs7Ozs7Ozs7O0FBS08sSUFBTUMsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUFBSCxPQUFPO0FBQUEseUNBQ3JDWCxrQkFBa0IsQ0FBQ1csT0FBRCxDQURtQjtBQUV4Q1IsSUFBQUEsSUFBSSxFQUFFQyw0Q0FBMkJXO0FBRk87QUFBQSxDQUFuQzs7OztBQUtBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQUwsT0FBTztBQUFBLFNBQ3JDQyxpQkFBaUIsaUNBQ1pELE9BRFk7QUFFZkwsSUFBQUEsS0FBSyxFQUFFQyw2Q0FBNEJDLE1BRnBCO0FBR2ZQLElBQUFBLE9BQU8sb0hBQTZHZ0IsMkJBQTdHO0FBSFEsS0FEb0I7QUFBQSxDQUFoQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7Z2VuZXJhdGVIYXNoSWR9IGZyb20gJy4vdXRpbHMnO1xuXG5pbXBvcnQge1xuICBERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFLFxuICBERUZBVUxUX05PVElGSUNBVElPTl9UT1BJQ1MsXG4gIERFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTLFxuICBERUZBVUxUX1VVSURfQ09VTlRcbn0gZnJvbSAnY29uc3RhbnRzL2RlZmF1bHQtc2V0dGluZ3MnO1xuXG5pbXBvcnQge0JVR19SRVBPUlRfTElOS30gZnJvbSAnY29uc3RhbnRzL3VzZXItZ3VpZGVzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbm90b2ZpY2F0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0XG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0Lm1lc3NhZ2UgLSBNZXNzYWdlIHRvIGRpc3BsYXkgZHVyaW5nIHRoZSBub3RpZmljYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHQudHlwZSAtIFRoZSB0eXBlIG9mIG1lc3NhZ2UuIE9uZSBvZiBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFU1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdC50b3BpYyAtIFRoZSB0b3BpYyB0aGUgbm90aWZpY2F0aW9uIGJlbG9uZ3MgdG8uIE9uZSBvZiBERUZBVUxUX05PVElGSUNBVElPTl9UT1BJQ1NcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHQuaWQgb3B0aW9uYWwgaWQgZm9yIG5vdGlmaWNhdGlvbi4gSWYgbm90IHByb3ZpZGVkIGl0IHdpbGwgYmUgZ2VuZXJhdGVkIGJ5IHRoZSBtZXRob2RcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHQub3B0aW9ucyAtIEV4dHJhIHBhcmFtZXRlcnMgdG8gc3RvcmUgYXMgcGFydCBvZiBodGUgbm90aWZpY2F0aW9uXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKHtcbiAgbWVzc2FnZSA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX01FU1NBR0UsXG4gIHR5cGUgPSBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUy5pbmZvLFxuICB0b3BpYyA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUy5nbG9iYWwsXG4gIGlkID0gZ2VuZXJhdGVIYXNoSWQoREVGQVVMVF9VVUlEX0NPVU5UKSxcbiAgLi4ub3B0aW9uc1xufSkge1xuICByZXR1cm4ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgaWQsXG4gICAgbWVzc2FnZSxcbiAgICB0eXBlLFxuICAgIHRvcGljXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBlcnJvciBub3RpZmljYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7e3RvcGljLCBpZCwgbWVzc2FnZSwgdHlwZTogKG51bGx8bnVtYmVyKX19XG4gKi9cbmV4cG9ydCBjb25zdCBlcnJvck5vdGlmaWNhdGlvbiA9IG9wdGlvbnMgPT4gKHtcbiAgLi4uY3JlYXRlTm90aWZpY2F0aW9uKG9wdGlvbnMpLFxuICB0eXBlOiBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUy5lcnJvclxufSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN1Y2Nlc3Mgbm90aWZpY2F0aW9uXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQHJldHVybnMge3t0b3BpYywgaWQsIG1lc3NhZ2UsIHR5cGU6IG51bGx9fVxuICovXG5leHBvcnQgY29uc3Qgc3VjY2Vzc05vdGlmaWNhdGlvbiA9IG9wdGlvbnMgPT4gKHtcbiAgLi4uY3JlYXRlTm90aWZpY2F0aW9uKG9wdGlvbnMpLFxuICB0eXBlOiBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUy5zdWNjZXNzXG59KTtcblxuZXhwb3J0IGNvbnN0IGV4cG9ydEltYWdlRXJyb3IgPSBvcHRpb25zID0+XG4gIGVycm9yTm90aWZpY2F0aW9uKHtcbiAgICAuLi5vcHRpb25zLFxuICAgIHRvcGljOiBERUZBVUxUX05PVElGSUNBVElPTl9UT1BJQ1MuZ2xvYmFsLFxuICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gZXhwb3J0IGltYWdlLCBwbGVhc2UgdGFrZSBhIHNjcmVlbnNob3Qgb2YgdGhlIGphdmFzY3JpcHQgY29uc29sZSwgcmVwb3J0IHRoZSB3aXRoIFt0aGlzIGxpbmtdKCR7QlVHX1JFUE9SVF9MSU5LfSkgYFxuICB9KTtcbiJdfQ==